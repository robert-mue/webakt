// 9 Aug 2025 Decided to remove the Class Action.   It had only one method, triggerEvent,
// which in any case needs to have access to the full log of actions.    Having it as an
// an object defined by a Class means that you need to convert it into an object-literal
// for saving in LocalStorage etc, which is pointless.

class ActionLog{

    constructor({actions:actions,meta:meta}) {
        this._actions = actions;
        this._meta = meta;
        console.log(this);
   }


    add (action) {  // See comment at top.   This is no longer an object defined by a Class,
                    // but a simple object-literal.
        if (!AKT.state.event_recording) return;
        if (AKT.state.playing_events) return;

        var datetime = new Date().toString();
        console.log(datetime);
        this._meta.datetime = datetime;   // This is the datetime for the whole log, 
            // being the datetime for the latest action.
        action.datetime = datetime;  // This is the datetime for this action.
        console.log(action);
        this._actions.push(action);
        AKT.state.current_action_log = this;
        console.log('AKT.state.current_action_log:\n',AKT.state.current_action_log);
        localStorage.setItem('current_action_log',JSON.stringify({actions:this._actions,meta:this._meta}));

    }


    save () {
        var id = prompt('acton_log name:','');
        localStorage.setItem('action_log_'+id,JSON.stringify(this._actions));
    }



    stop () {
        AKT.state.event_recording = false;
    }




    stepThroughRecording (id) {

        if (!AKT.state.startedStepping) {
            AKT.state.event_recording = false;
            AKT.state.playing_events = true;
            if (!id) {
                var fromLocalStorage = JSON.parse(localStorage.getItem('current_action_log'));
            } else {
                fromLocalStorage = JSON.parse(localStorage.getItem('action_log_'+id));
            }
            AKT.state.stepCounter = 0;
            var firstEventMessage = this._actions[0]._before;
            $('#message').html(firstEventMessage);
            AKT.state.startedStepping = true;
            return;
        }

        AKT.action_log.oneStep(AKT.action_log._actions);
        var iStep = AKT.state.stepCounter;
        if (iStep < this._actions.length) {
            var nextEventMessage = this._actions[iStep]._before;
            $('#message').html(iStep+': '+nextEventMessage);
        }
    }

    play (id) {
        AKT.state.event_recording = false;    // Possibly obsolete.
        AKT.state.action_play = true;         // Possibly obsolete.
        AKT.state.action_mode = 'playback';   // To prevent actions generated by the script being
            // recorded themselves.
        if (!id) {
            var fromLocalStorage = JSON.parse(localStorage.getItem('current_action_log'));
        } else {
            fromLocalStorage = JSON.parse(localStorage.getItem('action_log_'+id));
        }
        this._actions = fromLocalStorage.actions;
        this._meta = fromLocalStorage.meta;
        AKT.state.stepCounter = 0;
        AKT.timer = setInterval(this.oneStep,5000,this._actions);
        AKT.state.playingEvents = false;
    }


    oneStep () {
        $('button').css('background','#d0d0d0');
        var istep = AKT.state.stepCounter;
        if (istep === 3) {
            //$( "#test_alert" ).css({display:'block'});
        }
        var actionLog = AKT.state.current_action_log;
        console.log('\n\n\n\n###########################################################\noneStep():istep:\n', AKT.state.current_action_log._actions, AKT.state.current_action_log._actions.length, istep);
        //$('#message').html(actions[istep]._before);
        AKT.state.current_action_log.triggerEvent(istep);
        AKT.state.stepCounter += 1;
        if (AKT.state.stepCounter >= actionLog._actions.length) {
            clearInterval(AKT.timer);
            AKT.state.stepping_through_recording = false;
        }
    }



    triggerEvent (istep) {
 
        var action = this._actions[istep];
        if (action.event_type) {   // Temporary hack, until all action.type converted to action.event_type
            var eventType = action.event_type;
        } else {
            eventType = action.type;
        }
        var elementId = action.element_id;
        var selector = action.selector;
        var value = action.value;
        console.log(3333,eventType,elementId,selector,value)

        if (eventType === 'click'){

            if (value && typeof action.selector === 'string') {
                console.log('\n@@@@@ ',action.selector+' @@@@');
                //this._selector += '.'+action.selector;
                this._selector = action.selector;
                var values = null;
                //var values = action.selector;    // TODO Check: Not sure about this...
                
            } else if (action.selectors && Array.isArray(action.selectors)) {
                values = action.selectors;       // TODO Check: Not sure about this...
                for (var j=0; j<action.selectors.length; j++) {
                    var valueObject = action.selectors[j];   // {find:selector, text:text}
                    var selector = valueObject.find;
                    var value = valueObject.value;
                    if (valueObject.type === 'div') {
                        $('#'+this._element_id).find(selector).text(value);
                    } else if (valueObject.type === 'input') {
                        $('#'+this._element_id).find(selector).val(value);
                    } else if (valueObject.type === 'textarea') {
                        $('#'+this._element_id).find(selector).val(value);
                    } else {
                        alert('Software bug: text field of type '+valueObject.type+' not currently handled in AKT.playRecording.  Current record is '+JSON.stringify(action));
                    }
                }
            }

            //var fullSelector = '#'+elementId+' '+selector;
            console.log(2501,'fullSelector',elementId,selector);
            console.log(2502,'upper_selector,local_selector:',action.upper_selector,action.local_selector);
            //$(fullSelector).trigger('click',[values]);

            // The following are temporary hacks, until all action event handlers moved over
            // to action.upper_selector and action.local_selector.
            if (action.upper_selector && !action.local_selector) {
                console.log(2503,action.upper_selector);
                $(action.upper_selector).trigger('click');
            } else {
                if (action.upper_selector) {
                    var upperSelector = action.upper_selector;
                } else {
                    upperSelector = '#'+elementId;
                }
                if (action.local_selector) {
                    var localSelector = action.local_selector;
                } else {
                    localSelector = action.selector;
                }
                $(upperSelector).find(localSelector).trigger('click');
                AKT.text_to_speech('Click on the KB menu, and then the Statements command');
            }
            //if ($(eventRecord.selector)[0].localName === 'button') {
            //    $(eventRecord.selector).css('background','yellow');
            //}


        } else if (eventType === 'end_drag') {
            console.log(3334,value);
            //$(upperSelector).find(localSelector).style.left = value.x+'px';
            //$(upperSelector).find(localSelector).style.top = value.y+'px';
            $('#'+elementId).css('left',value.x+'px');
            $('#'+elementId).css('top',value.y+'px');


        } else if (eventType === 'mousedown'){
            $(this._selector).trigger('mousedown');
/*
        } else if (eventType === 'change') {
            console.log(99,'change');
            if (action.selector) {
                $(this._selector).trigger('change','checked');
            } else {
                $(this._selector).trigger('change','unchecked');
            }
*/
        } else if (eventType === 'change') {
            console.log(3334,elementId,selector,'option[value=',value,']')
            $('#'+elementId).find(selector).find('option[value="'+value+'"]').attr("selected",true);
            //$(this._selector).trigger('change',action.selector);

        } else if (eventType === 'select') {
            $('#'+elementId).find(selector).find('option[value=value]').attr("selected",true);
//$('select[name="options"]').find('option[value="3"]').attr("selected",true);

        } else if (eventType === 'checkboxxxx') {
            $(this._selector).prop('checked',action.selector).trigger('change');
      
        } else if (eventType === 'menuclick') {
            $(this._selector).trigger('click');

        } else if (eventType === 'menuleafclick') {
            AKT.menuHandler[step.selector.substring(1)]();

        } else if (eventType === 'keyup') {
            console.log('trigger:keyup');
            $('#'+elementId).find(selector).val(value);

        } else if (eventType === 'input') {
            console.log('\ntrigger:input');
            console.log(elementId,selector,value);
            $('#'+elementId).find(selector).val(value);

        } else if (eventType === 'checkbox') {
            console.log('\ntrigger:checkbox');
            console.log(elementId,selector,value);
            $('#'+elementId).find(selector).prop('checked',true);
 
        } else if (eventType === 'radio') {
            console.log('\ntrigger:radio');
            console.log(elementId,selector,value);
            $('#'+elementId).find(selector).prop('checked',true);
        }
    }



}
